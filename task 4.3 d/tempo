#include <Arduino.h>
#include <Ticker.h>   // Library for non-blocking timer
#include <DHT.h>      // Library for DHT temperature & humidity sensor

//// Pin Definitions
const uint8_t BUTTON_PIN = 2;        // Push button input (uses interrupt)
const uint8_t TRIG_PIN   = 3;        // Ultrasonic sensor trigger pin
const uint8_t ECHO_PIN   = 4;        // Ultrasonic sensor echo pin
const uint8_t DHT_PIN    = 5;        // DHT22 data pin

const uint8_t LED1_PIN   = 10;       // External LED controlled by button
const uint8_t LED2_PIN   = 11;       // External LED controlled by ultrasonic sensor
const uint8_t LED3_PIN   = LED_BUILTIN; // Built-in LED toggled by timer

//// Flags and variables
volatile bool buttonFlag = false;       // Set when button interrupt is triggered
volatile uint32_t lastBtnMicros = 0;    // Used for debouncing button (ignore noise)

//// DHT Sensor Setup
#define DHTTYPE DHT22          // Define sensor type
DHT dht(DHT_PIN, DHTTYPE);     // Create DHT object

//// Function to read distance from ultrasonic sensor (in cm)
long readUltrasonicCM() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH, 30000); // Measure pulse length (timeout 30ms)
  long distance = duration / 58;  // Convert to centimeters
  return distance;
}

//// Timer callback (runs every 1 second)
void timerTask() {
  // Toggle built-in LED (heartbeat indicator)
  digitalWrite(LED3_PIN, !digitalRead(LED3_PIN));

  // Read ultrasonic sensor
  long distance = readUltrasonicCM();
  if (distance > 0 && distance < 20) {   // If object is closer than 20cm
    digitalWrite(LED2_PIN, !digitalRead(LED2_PIN)); // Toggle LED2
    Serial.print("[TIMER] Object detected at ");
    Serial.print(distance);
    Serial.println(" cm -> LED2 toggled");
  } else {
    Serial.print("[TIMER] Distance = ");
    Serial.print(distance);
    Serial.println(" cm");
  }

  // Read DHT22 sensor
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  // If sensor fails to read, show error
  if (isnan(h) || isnan(t)) {
    Serial.println("[TIMER] Failed to read from DHT22!");
  } else {
    // Print humidity and temperature values
    Serial.print("[TIMER] Humidity: ");
    Serial.print(h);
    Serial.print(" % | Temperature: ");
    Serial.print(t);
    Serial.println(" Â°C");
  }
}

//// Interrupt Service Routine (ISR) for button
void ISR_button() {
  uint32_t now = micros();
  // Debounce: Only register press if >200ms since last press
  if (now - lastBtnMicros > 200000UL) {
    buttonFlag = true;         // Set flag to handle in main loop
    lastBtnMicros = now;
  }
}

//// Create Ticker (Stefan Staub library style)
Ticker timer1(timerTask, 1000);  // Run timerTask every 1000 ms (1 second)

void setup() {
  Serial.begin(115200);
  while (!Serial) {}   // Wait for Serial Monitor to open

  // Setup LEDs as outputs
  pinMode(LED1_PIN, OUTPUT);
  pinMode(LED2_PIN, OUTPUT);
  pinMode(LED3_PIN, OUTPUT);

  // Setup button as input with internal pull-up
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), ISR_button, FALLING);

  // Setup ultrasonic sensor pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Start DHT sensor
  dht.begin();

  // Start timer (runs timerTask every second)
  timer1.start();
  Serial.println("System started with Stefan Staub Ticker");
}

void loop() {
  // Update timer regularly (must be in loop)
  timer1.update();

  // If button was pressed (flag set in ISR)
  if (buttonFlag) {
    buttonFlag = false;   // Clear flag
    digitalWrite(LED1_PIN, !digitalRead(LED1_PIN)); // Toggle LED1
    Serial.println("[INT] Button pressed -> LED1 toggled");
  }
}
